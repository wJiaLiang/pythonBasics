# Python语言支持以下类型的运算符:

# 算术运算符
# 比较（关系）运算符
# 赋值运算符
# 逻辑运算符
# 位运算符
# 成员运算符
# 身份运算符
# 三目运算符


# 一、 算术运算符

""" 
以下假设变量： a=10，b=21：

+	加 - 两个对象相加	                              a + b 输出结果 31
-	减 - 得到负数或是一个数减去另一个数	                a - b 输出结果 -11
*	乘 - 两个数相乘或是返回一个被重复若干次的字符串	     a * b 输出结果 210
/	除 - x 除以 y	                                  b / a 输出结果 2.1
%	取模 - 返回除法的余数	                           b % a 输出结果 1
**	幂 - 返回x的y次幂	                              a**b 为10的21次方

//	取整除 - 往小的方向取整数	
>>> 9//2
4
>>> -9//2
-5

"""
# Python中，有3种除法，一种除法是/：
10 / 3
3.3333333333333335
# /除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：
9 / 3
3.0
# 还有一种除法是//，也称为地板除，只取整数部分，余数被抛弃：
10 // 3
3
# Python还提供一个余数运算，可以得到两个整数相除的余数：
10 % 3
1
# 如果想同时得到商和余数，可以用这个方法：
divmod(10,3)
(3, 1)

# 因为浮点数精度的问题，Python还存在一些计算方面的小问题，例如：
0.1+0.1+0.1-0.3
5.551115123125783e-17
# 要解决这个问题，可以导入decimal模块：
"""  
from decimal import Decimal
Decimal('0.1')+Decimal('0.1')+Decimal('0.1')-Decimal('0.3')
Decimal('0.0')
Decimal('0.1') / Decimal('0.3')
Decimal('0.3333333333333333333333333333')

from decimal import getcontext
getcontext().prec = 4 #设置全局精度
Decimal('0.1') / Decimal('0.3')
Decimal('0.3333')
注意其中提供的数字是用字符串的形式传递给Decimal的。
"""


# 二、比较运算符
# 以下假设变量a为10，变量b为20：
"""  
==	等于 - 比较对象是否相等	                (a == b) 返回 False。
!=	不等于 - 比较两个对象是否不相等	         (a != b) 返回 True。
>	大于 - 返回x是否大于y	                (a > b) 返回 False。
<	小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。	(a < b) 返回 True。
>=	大于等于 - 返回x是否大于等于y。	        (a >= b) 返回 False。
<=	小于等于 - 返回x是否小于等于y。	        (a <= b) 返回 True。

对于连续比较，Python是按这种机制解释的：
3>2>1 等于 (3>2) and (2>1)
相当于两个比较，然后用与&再结合起来。
"""

# 三、赋值运算符
# 以下假设变量a为10，变量b为20：
"""  
=	简单的赋值运算符	    c = a + b 将 a + b 的运算结果赋值为 c
+=	加法赋值运算符	        c += a 等效于 c = c + a
-=	减法赋值运算符	        c -= a 等效于 c = c - a
*=	乘法赋值运算符	        c *= a 等效于 c = c * a
/=	除法赋值运算符	        c /= a 等效于 c = c / a
%=	取模赋值运算符	        c %= a 等效于 c = c % a
**=	幂赋值运算符	        c **= a 等效于 c = c ** a
//=	取整除赋值运算符	    c //= a 等效于 c = c // a

:=	海象运算符，可在表达式内部为变量赋值。Python3.8 版本新增运算符。
在这个示例中，赋值表达式可以避免调用 len() 两次:
if (n := len(a)) > 10:
    print(f"List is too long ({n} elements, expected <= 10)")
"""

# 四、Python位运算符
# 按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下： 下表中变量 a 为 60，b 为 13，二进制格式如下：
"""  
a = 0011 1100
b = 0000 1101
-----------------
a&b = 0000 1100

a|b = 0011 1101

a^b = 0011 0001

~a  = 1100 0011

&	按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0。	   (a & b) 输出结果 12 ，二进制解释： 0000 1100
|	按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。	            (a | b) 输出结果 61 ，二进制解释： 0011 1101
^	按位异或运算符：当两对应的二进位相异时，结果为1。	                        (a ^ b) 输出结果 49 ，二进制解释： 0011 0001
~	按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1。	    (~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。
<<	左移动运算符：运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。	    a << 2 输出结果 240 ，二进制解释： 1111 0000
>>	右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数。	    a >> 2 输出结果 15 ，二进制解释： 0000 1111

"""

# 五、逻辑运算符

# Python语言支持逻辑运算符，但是没有其它语言中的&&和||语法，取而代之的是更加人性化的英文单词and or not（全部都是小写字母）。
# 以下假设变量 a 为 10, b为 20:
"""  
and	  x and y	布尔"与"  如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。	 (a and b) 返回 20。
or	  x or y	布尔"或"  如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。	     (a or b) 返回 10。
not	  not x	布尔"非"  如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。	    not(a and b) 返回 False

"""

# 六、成员运算符
"""  
in 与 not in是Python独有的运算符（全部都是小写字母），用于判断对象是否某个集合的元素之一，非常好用，并且运行速度很快。
返回的结果是布尔值类型的True或者False。

in	如果在指定的序列中找到值返回 True，否则返回 False。	x 在 y 序列中 , 如果 x 在 y 序列中返回 True。
not in	如果在指定的序列中没有找到值返回 True，否则返回 False。	x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。

list1 = [1, 2, 3, 4, 5]
a = 1
if a in list1:
    print("a是list1的元素之一")
else:
    print("a不是list1的元素")
"""

# 七、身份运算符
# 这也是Python的特色语法（全部都是小写字母）。身份运算符用于比较两个对象的存储单元
"""  
is	is  是判断两个标识符是不是引用自一个对象	x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False
is not	is not 是判断两个标识符是不是引用自不同对象	x is not y ， 类似 id(x) != id(y)。如果引用的不是同一个对象则返回结果 True，否则返回 False。
id() 函数用于获取对象内存地址。

注意is与比较运算符“==”的区别，两者有根本上的区别，切记不可混用：
is用于判断两个变量的引用是否为同一个对象，而==用于判断变量引用的对象的值是否相等！
内置函数：id()，用它可以查看某个变量或者对象的内存地址，两个相同内存地址的对象被认为是同一个对象。
"""

# 八、三目运算符（三元表达式）
"""  
python中的三目运算符不像其他语言一般的表示方法：判定条件?为真时的结果:为假时的结果。
在python中的格式为：为真时的结果 if 判定条件 else 为假时的结果
例如： True if 5>3 else False
"""

# 九、运算符优先级
# 下表列出了从最高到最低优先级的所有运算符。优先级高的运算符优先计算或处理，同级别的按从左往右的顺序计算（赋值运算符除外，它是按从右往左的顺序）
"""  
(expressions...),
[expressions...], {key: value...}, {expressions...}       
圆括号的表达式

x[index], x[index:index], x(arguments...), x.attribute
读取，切片，调用，属性引用

await x
await 表达式

**
乘方(指数)

+x, -x, ~x
正，负，按位非 NOT

*, @, /, //, %
乘，矩阵乘，除，整除，取余

+, -
加和减

<<, >>
移位

&
按位与 AND

^
按位异或 XOR

|
按位或 OR

in,not in, is,is not, <, <=, >, >=, !=, ==
比较运算，包括成员检测和标识号检测

not x
逻辑非 NOT

and
逻辑与 AND

or
逻辑或 OR

if -- else
条件表达式

lambda
lambda 表达式

:=
赋值表达式

"""
