# 多次的看到了在函数中调用别的函数的情况。如果一个函数在内部调用了自身，这个函数就被称为递归函数。

def sum_number(n):
    if n <= 0:
        return 0
    return n+sum_number(n-1)

toatl = sum_number(100)
print(toatl)
# 递归最核心的思想是：每一次递归，整体问题都要比原来减小，并且递归到一定层次时，要能直接给出结果！

# 每一个递归程序都遵循相同的基本步骤：
# 1.初始化算法。递归程序通常需要一个开始时使用的种子值（seed value）。可以向函数传递参数，或者提供一个入口函数，这个函数是非递归的，但可以为递归计算设置种子值。
# 2.检查要处理的当前值是否已经与基线条件相匹配（base case）。如果匹配，则进行处理并返回值。
# 3.使用更小的或更简单的子问题（或多个子问题）来重新定义答案。
# 4.对子问题运行算法。
# 5.将结果合并入答案的表达式。
# 6.返回结果。

# 递归函数的优点是定义简单，代码量少，逻辑清晰。理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。

"""  
使用递归函数需要注意防止递归深度溢出，在Python中，通常情况下，这个深度是1000层，超过将抛出异常。
在计算机中，函数递归调用是通过栈（stack）这种数据结构实现的，每当进入一个递归时，栈就会加一层，每当函数返回一次，栈就会减一层。
由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。

"""



