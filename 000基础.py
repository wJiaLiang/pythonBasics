# 一、 标识符

# 1、所谓的标识符就是对变量、常量、函数、类等对象起的名字。

# 2、Python语言在任何场景都严格区分大小写！


# 二、 命名规范

# 1、第一个字符必须是字母表中的字母或下划线 _
# 2、标识符的其他的部分由字母、数字和下划线组成
# 3、标识符对大小写敏感
# 4、变量名全部小写，常量名全部大写         语法规范不是强制要求
# 5、函数和方法名用小写加下划线             语法规范不是强制要求
# 6、类名用大写驼峰                        语法规范不是强制要求
# 7、模块和包的名字用小写                  语法规范不是强制要求


# 三、Python保留字
""" 
Python保留字，也叫关键字，是Python语言官方确定的用作语法功能的专用标识符，
不能把它们用作任何自定义标识符名称。关键字只包含小写字母。
Python的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字 
>>> import keyword
>>> keyword.kwlist

['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

除了不能使用关键字作为标识符，前面我们也强调过了，也不能使用内置函数同名的标识符。Python有很多内置函数，
>>> sum([1,2,3])
6

"""
# 四、注释
# 1、单行注释
    # Python中，以符号“#”为单行注释的开始，从它往后到本行的末尾，都是注释内容。

# 2、多行注释
    # Python没有真正意义上的多行注释（块注释）语法。你只能在每行的开头打上#号，然后假装自己是个多行注释;

    # 第一行注释
    # 第二行注释
    # 第三行注释

# 3、注释文档

# 在某些特定的位置，用三引号包括起来的部分，也被当做注释。但是，这种注释有专门的作用，用于为__doc__提供文档内容，
# 这些内容可以通过现成的工具，自动收集起来，形成帮助文档。比如，函数和类的说明文档：

import subprocess


def func(a, b):
    """
    这个是函数的说明文档。
    :param a: 加数
    :param b: 加数
    :return: 和
    """
    return a + b
#  需要强调的是这类注释必须紧跟在定义体下面，不能在任意位置。

# 五、代码头两行

# 很多时候，我们在一些py脚本文件的开头都能看到类似的以#开头的这样两行代码，它们不是注释，是一些设定。

#!/usr/bin/env python
# -*- coding:utf-8 -*-

""" 
第一行：用于指定运行该脚本的Python解释器，Linux专用，windows不需要。env方式下，系统会自动使用环境变量里指向的Python。
还有一种方式，#!/usr/bin/python3.6，这会强制要求使用系统中的python3.6解释器执行文件，这种方式不好，
一旦你本地的Python3.6版本删除了，会出现找不到解释器的错误。无论两种方式的哪一种，
都指的是在linux下使用./test.py的方式执行脚本时的设置，在使用类似python test.py或者python3 test.py的执行方式时，这一行不起作用。


第二行：代码的编码方式。不是程序要处理的数据的编码方式，而是程序自己本身的字符编码。在Python3中，全面支持Unicode，默认以UTF-8编码，我们不用再纠结中文的问题，
乱码的问题，所以本行其实可以不需要。但在Python2中，对字符的编码是个非常令人头疼的问题，通常都需要指定这么一行。
如果要自定义别的编码类型的话，可以像这样：# -- coding: cp-1252 --，但如果没有强制需求的话，不要自己作死，请坚持使用utf-8编码。

这两行要在文件的顶行，顶左，不要空格和空行， utf8和utf-8都行。
这里的-*-是什么意思呢？没意思，装饰美观好看而已
除了这两行，有时候我们还会附上作者、通讯地址、版权说明，版本说明等，全凭个人喜好了。
"""

# 六、 语句与缩进

# 语句：在代码中，能够完整表达某个意思、操作或者逻辑的最短代码，被称为语句。语句通常不超过一行，超过一行的称为多行语句。
# Python的标准语句不需要使用分号或逗号来表示语句结束，简简单单的换个行就表示本语句已经结束，下一句开始。


# 代码块：为完成某一特定功能而联系在一起的一组语句构成一个代码块。有判断、循环、函数、类等各种代码块。
# 代码块的首行通常以关键字开始，以冒号( : )结束。比如：

# 这是一个判断流程代码块
""" 
if expression : 
   pass
elif expression : 
   pass
else : 
   pass
"""

# Python最具特色的语法就是使用缩进来表示代码块，不需要使用大括号{}。
# 缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。
# 如果缩进数的空格数不一致，会抛出缩进异常（请记住IndentationError这个异常名！新手会经常和它做朋友）

# PEP8（Python官方的代码规范）：建议使用四个空格作为缩进！在文本编辑器中，需要设置把Tab自动转换为4个空格，确保不混用Tab和空格。在Pycharm中：tab键被自动转换成4个空格的缩进。
# linux环境中，如vim编辑器，请一定使用空格，不要使用tab键！

# 那么怎么才是正确的缩进方式呢？
    # 所有的普通语句，顶左开始编写，不需要缩进
    # 所有的语句块，首行不用缩进，从冒号结束后开始下一行，都要缩进
    # 直到该语句块结束，就退回缩进，表示当前块已结束
    # 语句块可以嵌套，所以缩进也可以嵌套 

# 同一行写多条语句：
""" 
前面我们说了，Python一行通常就是一条语句，一条语句通常也不会超过一行。其实，从语法层面，
Python并没有完全禁止在一行中使用多条语句，也可以使用分号实现多条语句在一行，比如：
import sys; x = '多条语句'; sys.stdout.write(x + '\n')
"""

# 多行语句： 前面是多条语句在一行，但如果一条语句实在太长，也是可以占用多行的，可以使用反斜杠(\)来实现多行语句：
string = "i love this country,"\
         +"because it is very beautiful!"\
         + "how do you think about it?" \
         + "Do you like it too?"

# 在 [], {}, 或 () 中的多行语句，可以不需要使用反斜杠(\)，直接回车，接着写。例如：
result = subprocess.Popen("ipconfig /all", stdin=subprocess.PIPE,
                          stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE,
                          shell=True, check=True)


# 七、pass语句

# pass语句是占位语句，它什么都不做，只是为了保证语法的正确性而写。以下场景中，可以使用pass语句：
    # 当你不知道后面的代码怎么写的时候
    # 当你不需要写代码细节的时候
    # 当语法必须，又没有实际内容可写的时候
    # 其它的一些你觉得需要的场景
# 例如：
# 我只想说明这个func函数需要三个参数，具体执行什么并不重要
# 但是函数体内如果什么都没有，会出现语法错误
# 这个时候，pass就是最好的选择。
def func(a,b,c):
    pass

# 八、空白字符与空白行

""" 
空白行、空白字符与代码缩进不同，并不是Python语法的一部分。空行或者空白字符会被当做空气一样的忽略。连续的空行或空白字符和单独的空白行几字符没有区别。
书写时不插入空白行或空白字符，Python解释器运行也不会出错。但是空白的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。

PEP8对于空行留白有专门的建议。

1、函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。
2、类和函数入口之间也用一行空行分隔，以突出函数入口的开始。
3、变量赋值的时候等号左右各给一个空白。逗号后面跟一个空白。

看下面的代码，作为标准的代码规范，在规定的地方留有规定的空白行和空白字符。

#!/usr/bin/env python
# -*- coding:utf-8 -*-

class Foo:
    pass

def func(a, b):
    pass

if __name__ == '__main__':
    pass

"""

# 九、字符串的表示形式

""" 
后面的字符串数据类型章节会有更深入的字符串介绍。这里作为一个前期的知识铺垫。

字符串，表示一段连续的字符，可以是有意义的单词、词组、语句，也可是无意义的字符组合。不在于它内部是由什么组成的，而在于它是否被引号引起来的。

比如， abc可能是个变量，但是"abc"肯定是个字符串！(再次强调，代码的世界没有中文标点，所有的符号类型都是英文半角！千万不要搞错了！)

在Python中，被引号括起来的都是字符串，这个引号可以是单引号，双引号，甚至3引号。

python中单引号和双引号的作用完全相同。但是注意：在其它语言中双引号引起来的才是字符串，单引号引起来的是字符！例如C。
例如json！所以很多同学在做json格式转换时，经常发生使用单引号，导致转换失败的问题。

使用三引号('''或\""")可以指定一个多行字符串。
转义符 ‘\‘，用来特殊转义，例如\r\n,\\。它可以将引号转义为单纯的引号，没有任何作用的引号。

原生字符串： 通过在字符串前加r或R，如 r"this is a line with \n"，表示这个字符串里的斜杠不需要转义，等同于自身。因此，例子中的\n会显示出来，并不是换行。

unicode字符串：加前缀u或U， 如 u"this is an unicode string"。

bytes类型：加前缀b，如b”this is a bytes data”。但是s=b“哈哈”，这种是不行的！

字符串会自动串联，如“i" “love" “you"会被自动转换为”I love you”。

"""

# 十、如何阅读错误调用栈的信息？


