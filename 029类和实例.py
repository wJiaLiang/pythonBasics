"""  
类，英文名字Class，有“类别”，“分类”，“聚类”的意思。必须牢记类是抽象的模板，用来描述具有相同属性和方法的对象的集合，比如Animal类。
而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。

Python使用class关键字来定义类，其基本结构如下：

class 类名(父类列表):
    pass
    
类名通常采用驼峰式命名方式，尽量让字面意思体现出类的作用。
Python采用多继承机制，一个类可以同时继承多个父类（也叫基类、超类），继承的基类有先后顺序，写在类名后的圆括号里。继承的父类列表可以为空，此时的圆括号可以省略。
但在Python3中，即使你采用类似class Student:pass的方法没有显式继承任何父类的定义了一个类，它也默认继承object类。因为，object是Python3中所有类的基类。



"""

# 下面是一个学生类：

class Student:
    classroom = '101'
    address = 'beijing' 

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def print_age(self):
        print('%s: %s' % (self.name, self.age))

"""  
可以通过调用类的实例化方法（有的语言中也叫初始化方法或构造函数）来创建一个类的实例。
默认情况下，使用类似obj=Student()的方式就可以生成一个类的实例。
但是，通常每个类的实例都会有自己的实例变量，例如这里的name和age，为了在实例化的时候体现实例的不同，
Python提供了一个def __init__(self):的实例化机制。
任何一个类中，名字为__init__的方法就是类的实例化方法，具有__init__方法的类在实例化的时候，会自动调用该方法，并传递对应的参数。比如：

"""
li = Student("李四", 24)
zhang = Student("张三", 23)
li.print_age()


# 1、实例变量和类变量

# 实例变量：
# 实例变量指的是实例本身拥有的变量。每个实例的变量在内存中都不一样。Student类中__init__方法里的name和age就是两个实例变量。
# 通过实例名加圆点的方式调用实例变量。

# 类变量：
# 定义在类中，方法之外的变量，称作类变量。类变量是所有实例公有的变量，每一个实例都可以访问、修改类变量。
# 在Student类中，classroom和address两个变量就是类变量。可以通过类名或者实例名加圆点的方式访问类变量，比如：
print(Student.classroom) # 101
print(Student.address) # beijing 
print(li.classroom)  # 101
print(zhang.address) #beijing

"""  
# 在使用实例变量和类变量的时候一定要注意，使用类似zhang.name访问变量的时候，
# 实例会先在自己的实例变量列表里查找是否有这个实例变量，如果没有，那么它就会去类变量列表里找，如果还没有，弹出异常。


Python动态语言的特点，让我们可以随时给实例添加新的实例变量，给类添加新的类变量和方法。因此，在使用li.classroom = '102'的时候，
要么是给已有的实例变量classroom重新赋值，要么就是新建一个li专属的实例变量classroom并赋值为‘102’。看下面的例子：

为了防止发生上面的混淆情况，对于类变量，请坚持使用类名.类变量的访问方式，不要用实例去访问类变量。

"""

# 类的方法：





