# set集合是一个无序不重复元素的集，基本功能包括关系测试和消除重复元素，并且可以进行交集、并集、差集等常见的集合操作。
# 集合使用大括号 {} 框定元素，并以逗号进行分隔。

# 如果要创建一个空集合，必须用 set() 而不是 {} ，因为后者创建的是一个空字典。
# 集合除了在形式上最外层用的也是花括号外，其它的和字典没有一毛钱关系。

# 集合数据类型的核心在于自动去重。很多时候，这能给你省不少事。
s = set([1, 1, 2, 3, 3, 4])           # 使用 set() 函数从列表创建集合
st = set("it is a nice day")     # 对于字符串，集合会把它一个一个拆开，然后去重
print(s)    # {1, 2, 3, 4}
print(st)   # {'c', 'i', 'd', 's', 'n', 'y', 'e', ' ', 'a', 't'}

# 通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：
s.add(5)
print(s)  # {1, 2, 3, 4, 5}

# 可以通过update()方法，将另一个对象更新到已有的集合中，这一过程同样会进行去重。
s.update("abc")
print(s)  # {1, 2, 3, 4, 5, 'c', 'a', 'b'}

# 通过remove(key)方法删除指定元素，或者使用pop()方法。注意，集合的pop方法无法设置参数，删除指定的元素：

s.remove("c")
print(s)  # {1, 2, 3, 4, 5, 'b', 'a'}

# 因为集合既不支持下标索引也不支持字典那样的通过键获取值。
# 除了add、clear、copy、pop、remove、update等集合常规操作
# 剩下的全是数学意义上的集合操作，交并差等等。
# 对集合进行交并差等，既可以使用union一类的英文方法名，也可以更方便的 使用减号表示差集，“&”表示交集，“|”表示并集

# 以下演示了两个集合的交、并、差操作
a = set('abracadabra')
b = set('alacazam')
print(a - b)   # {'d', 'b', 'r'}    在 a 中的字母，但不在 b 中
print(a | b)   # {'a', 'm', 'd', 'c', 'z', 'b', 'r', 'l'}  在 a 或 b 中的字母
print(a & b)   # {'a', 'c'}  在 a 和 b 中都有的字母
print(a ^ b)    # {'l', 'b', 'd', 'z', 'r', 'm'} 在 a 或 b 中的字母，但不同时在 a 和 b 中
print("a" in a)  # True  成员监测

"""  
集合数据类型属于Python内置的数据类型，但不被重视，在很多书籍中甚至都看不到一点介绍。其实，集合是一种非常有用的数据结构，
它的去重和集合运算是其它内置类型都不具备的功能，在很多场合有着非常重要的作用，比如网络爬虫。
"""
